{
  "author": {
    "name": "George Heeres",
    "email": "gheeres@gmail.com"
  },
  "name": "activedirectory",
  "version": "0.3.1",
  "description": "ActiveDirectory is an ldapjs client for authN (authentication) and authZ (authorization) for Microsoft Active Directory with range retrieval support for large Active Directory installations.",
  "main": "index.js",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.8"
  },
  "keywords": [
    "ldap",
    "active directory"
  ],
  "bugs": {
    "url": "https://github.com/gheeres/node-activedirectory/issues"
  },
  "dependencies": {
    "ldapjs": ">= 0.5.7",
    "async": ">= 0.1.22",
    "underscore": ">= 1.4.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gheeres/node-activedirectory.git"
  },
  "license": "MIT",
  "readme": "ActiveDirectory for Node\n=========\n\nActiveDirectory is an ldapjs client for authN (authentication) and authZ (authorization) for Microsoft Active Directory with range retrieval support for large Active Directory installations. This code was a port of an existing C# library (not published) that I had written a few years ago. Here are the key features\n\n  - Authenticate\n  - Authorization (via group membership information)\n  - Nested groups support\n  - Range specifier / retrieval support (http://msdn.microsoft.com/en-us/library/dd358433.aspx)\n  - Referral support\n\nRequired Libraries\n-----------\n\nActiveDirectory uses the following additional node modules:\n\n* [underscore] - a utility-belt library for JavaScript that provides a lot of the functional programming support\n* [async] - Async utilities for node and the browser\n* [ldapjs] - A pure JavaScript, from-scratch framework for implementing LDAP clients and servers in Node.js\n\nInstallation\n--------------\n\n```sh\nnpm install activedirectory\n```\n\nUsage\n--------------\n\n```js\nvar ActiveDirectory = require('activedirectory');\nvar ad = new ActiveDirectory(url, baseDN, username, password);\n```\n\nOptionally the configuration can be specified with an object:\n\n```js\nvar ActiveDirectory = require('activedirectory');\nvar ad = new ActiveDirectory({ url: 'ldap://dc.domain.com',\n                               baseDN: 'dc=domain,dc=com',\n                               username: 'username@domain.com',\n                               password: 'password' });\n```\n\nThe username and password specified in the configuration are what are used for user and group lookup operations.\n\n__Attributes__\n\nBy default, the following attributes are returned for users and groups:\n\n* user - userPrincipalName, sAMAccountName, mail, lockoutTime, whenCreated, pwdLastSet, userAccountControl, employeeID,  sn,  givenName, initials, cn, displayName, comment, description\n* group - objectCategory, distinguishedName, cn, description, member\n\nIf you need to override those defaults, then you can override them when you create your ActiveDirectory instance:\n\n```js\nvar ad = new ActiveDirectory({ url: 'ldap://dc.domain.com',\n                               baseDN: 'dc=domain,dc=com',\n                               username: 'username@domain.com',\n                               password: 'password',\n                               attributes: {\n                                 user: [ 'myCustomAttribute', 'mail', 'userPrinicipalName' ],\n                                 group: [ 'anotherCustomAttribute', 'objectCategory' ]\n                               }\n                              });\n```\nor\n```js\nvar ad = new ActiveDirectory(url, baseDN, username, password, {\n                             attributes: {\n                               user: [ 'myCustomAttribute', 'mail', 'userPrinicipalName' ],\n                               group: [ '\n                             });\n```\n\nIf overriding the 'user' or 'group' attribute, you must specify ALL of the attributes you want. The existing defaults\nwill be overridden. Optionally, you can override the attributes on a per call basis using the 'opts' parameter.\n\n__Referrals__\nBy default, referral chasing is disabled. To enable it, specify a referrals attribute when you create your instance.\nThe referrals object has the following syntax:\n\n```js\n{\n  referrals: {\n    enabled: false,\n    excluded: [\n      'ldaps?://ForestDnsZones\\./.*',\n      'ldaps?://DomainDnsZones\\./.*',\n      'ldaps?://.*/CN=Configuration,.*'\n    ]\n  }\n}\n```\n\nThe 'excluded' options is a list of regular expression filters to ignore specific referrals. The default exclusion list\nis included above, ignoring the special partitions that ActiveDirectory creates by default. To specify these options,\noverride them as follows:\n\n```js\nvar ad = new ActiveDirectory({ url: 'ldap://dc.domain.com',\n                               baseDN: 'dc=domain,dc=com',\n                               username: 'username@domain.com',\n                               password: 'password',\n                               attributes: { ... },\n                               referrals: {\n                                 enabled: true,\n                                 excluded: [ ]\n                               }\n                              });\n```\nor\n```js\nvar ad = new ActiveDirectory(url, baseDN, username, password, {\n                             attributes: { ... },\n                             referrals: { enabled: true });\n```\n\nIf you enable referral chasing, the specified username MUST be a userPrincipalName.\n\n---------------------------------------\n\nDocumentation\n--------------\n* [authenticate](#authenticate)\n* [findUser](#findUser)\n* [findGroup](#findGroup)\n* [isUserMemberOf](#isUserMemberOf)\n* [groupExists](#groupExists)\n* [userExists](#userExists)\n* [getGroupMembershipForGroup](#getGroupMembershipForGroup)\n* [getGroupMembershipForUser](#getGroupMembershipForUser)\n* [getUsersForGroup](#getUsersForGroup)\n\n---------------------------------------\n\n<a name=\"authenticate\" />\n### authenticate(username, password, callback)\n\nAuthenticates the username and password by doing a simple bind with the specified credentials.\n\n__Arguments__\n\n* username - The username to authenticate.\n* password - The password to use for authentication.\n* callback(err, authenticated) - A callback which is called after authentication is completed.\n\n__Example__\n\n```js\nvar ad = new ActiveDirectory(config);\nvar username = 'john.smith';\nvar password = 'password';\n\nad.authenticate(username, password, function(err, auth) {\n  if (err) {\n    console.log('ERROR: '+JSON.stringify(err));\n    return;\n  }\n  \n  if (auth) {\n    console.log('Authenticated!');\n  }\n  else {\n    console.log('Authentication failed!');\n  }\n});\n```\n\n---------------------------------------\n\n<a name=\"findUser\" />\n### findUser(opts, username, includeMembership, callback)\n\nLooks up or finds a username by their sAMAccountName, userPrincipalName, distinguishedName (dn) or custom filter. If found, the returned object contains all of the requested attributes. By default, the following attributes are returned: \n\n* userPrincipalName, sAMAccountName, mail, lockoutTime, whenCreated, pwdLastSet, userAccountControl, employeeID,  sn,  givenName, initials, cn, displayName, comment, description\n\n__Arguments__\n\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* username - The username to retrieve information about. Optionally can pass in the distinguishedName (dn) of the user to retrieve.\n* includeMembership - Indicates if the request should also retrieve the group memberships for the user. Default = false;\n* callback(err, user) - The callback to execute when completed. callback(err: {Object}, user: {User})\n\n__Example__\n\n```js\n// Any of the following username types can be searched on\nvar sAMAccountName = 'username';\nvar userPrincipalName = 'username@domain.com';\nvar dn = 'CN=Smith\\\\, John,OU=UUsers,DC=domain,DC=com';\n\n// Find user by a sAMAccountName\nvar ad = new ActiveDirectory(config);\nad.findUser(sAMAccountName, function(err, user) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  if (! user) console.log('User: ' + sAMAccountName + ' not found.');\n  else console.log(JSON.stringify(user));\n});\n```\n\n---------------------------------------\n\n<a name=\"findGroup\" />\n### findGroup(opts, groupName, callback)\n\nLooks up or find a group by common name (CN) which is required to be unique in Active Directory or optionally by the distinguished name. Supports groups with range retrieval specifiers. The following attributes are returned by default for the group:\n\n* objectCategory, distinguishedName, cn, description, member\n\n__Arguments__\n\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* groupName -  The group (cn) to retrieve information about. Optionally can pass in the distinguishedName (dn) of the group to retrieve.\n* callback(err, group) - The callback to execute when completed. callback(err: {Object}, group: {Group})\n\n\n__Example__\n\n```js\n// Any of the following group names can be searched on\nvar groupName = 'Employees';\nvar dn = 'CN=Employees,OU=Groups,DC=domain,DC=com'\n\n// Find group by common name\nvar ad = new ActiveDirectory(config);\nad.findGroup(groupName, function(err, group) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  if (! user) console.log('Group: ' + groupName + ' not found.');\n  else {\n    console.log(group);\n    console.log('Members: ' + (group.member || []).length);\n  }\n});\n```\n\n---------------------------------------\n\n<a name=\"isUserMemberOf\" />\n### isUserMemberOf(opts, username, groupName, callback)\n\nChecks to see if a user is a member of the specified group. This function will also check for group membership inside of a group.  Even if a user is not explicity listed as a member of a particular group, if a group that the user is a member of belongs to the group, then this function will return true.\n\n__Arguments__\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* username - The username to check for membership. Can be specied as a sAMAccountName, userPrincipalName or distinguishedName (dn)\n* groupName - The group to check for membership. Can be a commonName (cn) or a distinguishedName (dn)\n* callback - The callback to execute when completed. callback(err: {Object}, result: {Boolean})\n\n__Example__\n\n```js\nvar username = 'user@domain.com';\nvar groupName = 'Employees';\n\nvar ad = new ActiveDirectory(config);\nvar ad.isUserMemberOf(username, groupName, function(err, isMember) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  console.log(username + ' isMemberOf ' + groupName + ': ' + isMember);\n});\n```\n\n---------------------------------------\n\n<a name=\"groupExists\" />\n### groupExists(opts, groupName, callback)\n\nChecks to see if the specified group exists.\n\n__Arguments__\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* groupName - The group to check if is defined. Can be a commonName (cn) or a distinguishedName (dn)\n* callback - The callback to execute when completed. callback(err: {Object}, result: {Boolean})\n\n__Example__\n\n```js\nvar groupName = 'Employees';\n\nvar ad = new ActiveDirectory(config);\nad.groupExists(groupName, function(err, exists) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  console.log(groupName + ' exists: ' + exists);\n});\n```\n\n---------------------------------------\n\n<a name=\"userExists\" />\n### userExists(opts, username, callback)\n\nChecks to see if the specified user exists.\n\n__Arguments__\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* username - The username to check if it exists. Can be a sAMAccountName, userPrincipalName or a distinguishedName (dn)\n* callback - The callback to execute when completed. callback(err: {Object}, result: {Boolean})\n\n__Example__\n\n```js\nvar username = 'john.smith';\n\nvar ad = new ActiveDirectory(config);\nad.userExists(username, function(err, exists) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  console.log(username + ' exists: ' + exists);\n});\n```\n\n---------------------------------------\n\n<a name=\"getUsersForGroup\" />\n### getUsersForGroup(opts, groupName, callback)\n\nFor the specified group, retrieve all of the users that belong to the group. If the group contains groups, then the members of those groups are recursively retrieved as well to build a complete list of users that belong to the specified group.\n\n__Arguments__\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* groupName - The name of the group to retrieve membership from. Can be a commonName (cn) or a distinguishedName (dn)\n* callback - The callback to execute when completed. callback(err: {Object}, groups: {Array[User]})\n\n__Example__\n\n```js\nvar groupName = 'Employees';\n\nvar ad = new ActiveDirectory(config);\nad.getUsersForGroup(groupName, function(err, users) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  if (! users) console.log('Group: ' + groupName + ' not found.');\n  else {\n    console.log(JSON.stringify(users));\n  }\n});\n```\n\n\n---------------------------------------\n\n<a name=\"getGroupMembershipForUser\" />\n### getGroupMembershipForUser(opts, username, callback)\n\nFor the specified username, retrieve all of the groups that a user belongs to. If a retrieved group is a member of another group, then that group is recursively retrieved as well to build a complete hierarchy of groups that a user belongs to.\n\n__Arguments__\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* username - The name of the user to retrieve group membership for. Can be a sAMAccountName, userPrincipalName, or a distinguishedName (dn)\n* callback - The callback to execute when completed. callback(err: {Object}, groups: {Array[Group]})\n\n__Example__\n\n```js\nvar sAMAccountName = 'john.smith';\n\nvar ad = new ActiveDirectory(config);\nad.getGroupMembershipForUser(sAMAccountName, function(err, groups) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  if (! groups) console.log('User: ' + sAMAccountName + ' not found.');\n  else console.log(JSON.stringify(groups));\n});\n```\n\n---------------------------------------\n\n<a name=\"getGroupMembershipForGroup\" />\n### getGroupMembershipForGroup(opts, groupName, callback)\n\nFor the specified group, retrieve all of the groups that the group is a member of. If a retrieved group is a member of another group, then that group is recursively retrieved as well to build a complete hierarchy of groups that a user belongs to.\n\n__Arguments__\n* opts - Optional LDAP query string parameters to execute. { scope: '', filter: '', attributes: [ '', '', ... ], sizeLimit: 0, timelimit: 0 }\n* groupName - The name of the user to retrieve group membership for. Can be a sAMAccountName, userPrincipalName, or a distinguishedName (dn)\n* callback - The callback to execute when completed. callback(err: {Object}, groups: {Array[Group]})\n\n__Example__\n\n```js\nvar groupName = 'Employees';\n\nvar ad = new ActiveDirectory(config);\nad.getGroupMembershipForGroup(groupName, function(err, groups) {\n  if (err) {\n    console.log('ERROR: ' +JSON.stringify(err));\n    return;\n  }\n\n  if (! groups) console.log('Group: ' + groupName + ' not found.');\n  else console.log(JSON.stringify(groups));\n});\n```\n\n\n  [underscore]: http://underscorejs.org/\n  [async]: https://github.com/caolan/async\n  [ldapjs]: http://ldapjs.org/",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/gheeres/node-activedirectory",
  "_id": "activedirectory@0.3.1",
  "_from": "activedirectory@"
}
